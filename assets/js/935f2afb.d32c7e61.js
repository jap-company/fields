"use strict";(self.webpackChunkfields_docs=self.webpackChunkfields_docs||[]).push([[53],{1109:function(i){i.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"link","label":"Overview","href":"/fields/docs/overview","docId":"overview"},{"type":"link","label":"Module","href":"/fields/docs/validation-module","docId":"validation-module"},{"type":"link","label":"Syntax","href":"/fields/docs/validation-syntax","docId":"validation-syntax"},{"type":"link","label":"Error","href":"/fields/docs/validation-error","docId":"validation-error"},{"type":"link","label":"FailWith","href":"/fields/docs/fail-with","docId":"fail-with"},{"type":"category","label":"Data Types","items":[{"type":"link","label":"Field","href":"/fields/docs/field","docId":"field"},{"type":"link","label":"FieldPath","href":"/fields/docs/fieldpath","docId":"fieldpath"},{"type":"link","label":"Rule","href":"/fields/docs/rule","docId":"rule"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Type Classes","items":[{"type":"link","label":"Validated","href":"/fields/docs/validated","docId":"validated"},{"type":"link","label":"Effect","href":"/fields/docs/effect","docId":"effect"},{"type":"link","label":"ValidationPolicy","href":"/fields/docs/validation-policy","docId":"validation-policy"}],"collapsed":true,"collapsible":true},{"type":"link","label":"Goals of the project","href":"/fields/docs/goals","docId":"goals"},{"type":"link","label":"Contributing","href":"/fields/docs/contributing","docId":"contributing"}]},"docs":{"accumulate":{"id":"accumulate","title":"accumulate","description":""},"contributing":{"id":"contributing","title":"Contributing","description":"All suggestions welcome :)!","sidebar":"docs"},"effect":{"id":"effect","title":"Effect","description":"Defines Monad/Defer like capabilities for your F[_].","sidebar":"docs"},"fail-fast":{"id":"fail-fast","title":"FailFast","description":""},"fail-with":{"id":"fail-with","title":"FailWith","description":"Fields has capability for user to use his own error type and this raises question how should library know for standart validation which error to use? FailWith* typeclasses gives this library ability to fail with specific errors.","sidebar":"docs"},"field":{"id":"field","title":"Field","description":"Library is called Fields solely because it is built around Field data type.","sidebar":"docs"},"fieldpath":{"id":"fieldpath","title":"FieldPath","description":"Stores Field path, that at the end of the day is used to know where some ValidationError was raised.","sidebar":"docs"},"goals":{"id":"goals","title":"Goals of the project","description":"- Easier validation","sidebar":"docs"},"overview":{"id":"overview","title":"Overview","description":"Fields is a Scala validation library that you should use because it is:","sidebar":"docs"},"rule":{"id":"rule","title":"Rule","description":"When using validation syntax result type of validation will be Rule\\\\[F, V, E\\\\] where F, V, E is your Effect, Validated and Error respectively.","sidebar":"docs"},"traits":{"id":"traits","title":"traits","description":"- **F**inal Tagless. Choose any Effect, Validated, or Error types."},"validated":{"id":"validated","title":"Validated","description":"Defines Validated capabilities for V[_], so that Fields know how to use it when validating.","sidebar":"docs"},"validation":{"id":"validation","title":"Validation","description":"Syntax"},"validation-error":{"id":"validation-error","title":"Error","description":"This library comes with some predefined error types and some of them may suit you needs.","sidebar":"docs"},"validation-module":{"id":"validation-module","title":"Module","description":"All syntax comes from ValidationModule and if default ones do not suit your needs you can define custom.","sidebar":"docs"},"validation-policy":{"id":"validation-policy","title":"ValidationPolicy","description":"Encapsulates Field validation logic. Also there is ValidationPolicyBuilder which provides convenient syntax to define Field validation logic","sidebar":"docs"},"validation-syntax":{"id":"validation-syntax","title":"Syntax","description":"Here is complete list of predefined validation syntax.","sidebar":"docs"}}}')}}]);