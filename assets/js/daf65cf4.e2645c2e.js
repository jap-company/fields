"use strict";(self.webpackChunkfields_docs=self.webpackChunkfields_docs||[]).push([[254],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),f=r,v=p["".concat(o,".").concat(f)]||p[f]||d[f]||i;return n?a.createElement(v,l(l({ref:t},c),{},{components:n})):a.createElement(v,l({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=p;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},980:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return o},default:function(){return f},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return d}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=["components"],s={},o="ValidationResult",u={unversionedId:"validation-result",id:"validation-result",title:"ValidationResult",description:"Defines ValidationResult capabilities for VR[_], so that Fields know how to use it when validating.",source:"@site/../fields-docs/target/mdoc/validation-result.md",sourceDirName:".",slug:"/validation-result",permalink:"/fields/docs/validation-result",draft:!1,editUrl:"https://github.com/jap-company/fields/tree/master/docs/validation-result.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"FieldPath",permalink:"/fields/docs/fieldpath"},next:{title:"ValidationEffect",permalink:"/fields/docs/validation-effect"}},c={},d=[{value:"Instances",id:"instances",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Create",id:"create",level:3},{value:"Operations",id:"operations",level:3},{value:"Fail Multiple Fields",id:"fail-multiple-fields",level:3}],p={toc:d};function f(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"validationresult"},"ValidationResult"),(0,i.kt)("p",null,"Defines ValidationResult capabilities for ",(0,i.kt)("inlineCode",{parentName:"p"},"VR[_]"),", so that Fields know how to use it when validating."),(0,i.kt)("h2",{id:"instances"},"Instances"),(0,i.kt)("p",null,"Predefined instances:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"jap.fields.ValidationResult.Accumulate")," - accumulates errors."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"jap.fields.ValidationResult.FailFast")," - holds first error that occured. Built using ",(0,i.kt)("inlineCode",{parentName:"li"},"Either")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cats.data.ValidatedNel[_, Unit]")," - part of cats module"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cats.data.ValidatedNec[_, Unit]")," - part of cats module")),(0,i.kt)("p",null,"If you need you can use your own ValidationResult data type by creating typeclass instance for it.\nHere is how it is implemented for FailFast"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"type FailFast[+E] = Either[E, Unit]\nimplicit object FailFast extends FailFastLike[FailFast] {\n    def map[E, B](a: FailFast[E])(f: E => B): FailFast[B]   = a.left.map(f)\n    def valid[E]: FailFast[E]                               = Right(())\n    def invalid[E](e: E): FailFast[E]                       = Left(e)\n    def isValid[E](e: FailFast[E]): Boolean                 = e.isRight\n    def and[E](a: FailFast[E], b: FailFast[E]): FailFast[E] = a.flatMap(_ => b)\n    def errors[E](vr: FailFast[E]): List[E]                 = vr.left.toSeq.toList\n    override def invalidMany[E](eh: E, et: E*): FailFast[E] = Left(eh)\n}\n")),(0,i.kt)("h2",{id:"syntax"},"Syntax"),(0,i.kt)("p",null,"Having ValidationResult for your ",(0,i.kt)("inlineCode",{parentName:"p"},"VR[_]")," in scope you can use such syntax"),(0,i.kt)("h3",{id:"create"},"Create"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import jap.fields._\nimport jap.fields.ValidationResult._\nimport jap.fields.syntax.ValidationResultSyntax._\n\nval VR: ValidationResult[Accumulate] = Accumulate\n// VR: ValidationResult[[E >: Nothing <: Any] => Accumulate[E]] = jap.fields.ValidationResult$Accumulate$@341e3893\nval vr1 = VR.valid\n// vr1: Accumulate[Nothing] = Valid\nval vr2 = VR.invalid("ERR01")\n// vr2: Accumulate[String] = Invalid(errors = List("ERR01"))\nval vr3 = "ERR02".invalid[Accumulate]\n// vr3: Accumulate[String] = Invalid(errors = List("ERR02"))\nval vr4 = VR.invalidMany("ERR03", "ERR04")\n// vr4: Accumulate[String] = Invalid(errors = List("ERR03", "ERR04"))\n')),(0,i.kt)("h3",{id:"operations"},"Operations"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'vr1.isValid\n// res0: Boolean = true\nvr2.when(false)\n// res1: Accumulate[String] = Valid\nvr2.unless(true)\n// res2: Accumulate[String] = Valid\nvr2.asError("ERROR02")\n// res3: Accumulate[String] = Invalid(errors = List("ERROR02"))\nvr2.asInvalid(vr4)\n// res4: Accumulate[String] = Invalid(errors = List("ERR03", "ERR04"))\nvr2.isInvalid\n// res5: Boolean = true\nvr2.errors\n// res6: List[String] = List("ERR01")\nvr1 && vr2\n// res7: Accumulate[String] = Invalid(errors = List("ERR01"))\nvr2.and(vr3)\n// res8: Accumulate[String] = Invalid(errors = List("ERR01", "ERR02"))\nvr1 || vr2\n// res9: Accumulate[String] = Valid\nvr2.or(vr3)\n// res10: Accumulate[String] = Invalid(errors = List("ERR01", "ERR02"))\nList(vr1, vr2, vr3).sequence\n// res11: Accumulate[String] = Invalid(errors = List("ERR01", "ERR02"))\nList(vr1, vr1).sequence\n// res12: Accumulate[Nothing] = Valid\n')),(0,i.kt)("h3",{id:"fail-multiple-fields"},"Fail Multiple Fields"),(0,i.kt)("p",null,"VR.traverse is very useful when you want to fail multiple Field`s with same error"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import jap.fields.DefaultAccumulateVM._\nVR.traverse(Field(FieldPath("1"), 1), Field(FieldPath("2"), 2))(_.failMessage("ERROR"))\n')))}f.isMDXComponent=!0}}]);