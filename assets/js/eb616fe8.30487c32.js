"use strict";(self.webpackChunkfields_docs=self.webpackChunkfields_docs||[]).push([[642],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),d=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=d(e.components);return a.createElement(o.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(t),m=r,h=p["".concat(o,".").concat(m)]||p[m]||u[m]||i;return t?a.createElement(h,l(l({ref:n},c),{},{components:t})):a.createElement(h,l({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=p;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var d=2;d<i;d++)l[d]=t[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},191:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return u}});var a=t(7462),r=t(3366),i=(t(7294),t(3905)),l=["components"],s={},o="Syntax",d={unversionedId:"validation-syntax",id:"validation-syntax",title:"Syntax",description:"Here is complete list of predefined validation syntax.",source:"@site/../fields-docs/target/mdoc/validation-syntax.md",sourceDirName:".",slug:"/validation-syntax",permalink:"/fields/docs/validation-syntax",draft:!1,editUrl:"https://github.com/jap-company/fields/tree/master/docs/validation-syntax.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Module",permalink:"/fields/docs/validation-module"},next:{title:"Error",permalink:"/fields/docs/validation-error"}},c={},u=[{value:"Generic",id:"generic",level:2},{value:"Boolean",id:"boolean",level:2},{value:"Ordering",id:"ordering",level:2},{value:"Option",id:"option",level:2},{value:"String",id:"string",level:2},{value:"Iterable",id:"iterable",level:2},{value:"Map",id:"map",level:2},{value:"Effectful",id:"effectful",level:2}],p={toc:u};function m(e){var n=e.components,t=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"syntax"},"Syntax"),(0,i.kt)("p",null,"Here is complete list of predefined validation syntax."),(0,i.kt)("h2",{id:"generic"},"Generic"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import jap.fields._\nimport jap.fields.DefaultAccumulateVM._\nimport jap.fields.FieldPathConversions._\n\nval field: Field[Int] = Field("1", 1)\n// field: Field[Int] = Field(path = FieldPath(parts = List("1")), value = 1)\nfield.ensure(_ == 3, _.failInvalid)\n// res0: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(Invalid(path = FieldPath(parts = List("1"))))\n// )\nfield.assert(_ == 3, _.invalidError)\n// res1: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(Invalid(path = FieldPath(parts = List("1"))))\n// )\nfield.check(f => if(false) f.failMessage("A") else f.failMessage("B"))\n// res2: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(Message(path = FieldPath(parts = List("1")), error = "B", message = None))\n// )\nfield equalTo 2\n// res3: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(Equal(path = FieldPath(parts = List("1")), compared = "2"))\n// )\nfield notEqualTo 1\n// res4: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(NotEqual(path = FieldPath(parts = List("1")), compared = "1"))\n// )\nfield equalTo Field("2", 2)\n// res5: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(Equal(path = FieldPath(parts = List("1")), compared = "2"))\n// )\nfield notEqualTo Field("1", 1)\n// res6: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(NotEqual(path = FieldPath(parts = List("1")), compared = "1"))\n// )\nfield in List(2, 3)\n// res7: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(OneOf(path = FieldPath(parts = List("1")), variants = List("2", "3")))\n// )\nfield.all(_ === 2, _ !== 1)\n// res8: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(\n//     Equal(path = FieldPath(parts = List("1")), compared = "2"),\n//     NotEqual(path = FieldPath(parts = List("1")), compared = "1")\n//   )\n// )\nfield.any(_ === 2, _ !== 3)\n// res9: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Valid\nfield.when(false)(_ !== field.value)\n// res10: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Valid\nfield.unless(true)(_ !== field.value)\n// res11: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Valid\nimplicit val policy: Policy[Int] = _ < 0\n// policy: ValidationPolicy[Int, Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = repl.MdocSession$App$$Lambda$28606/308250220@7fd081ad\nfield.validate\n// res12: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(Less(path = FieldPath(parts = List("1")), compared = "0"))\n// )\n')),(0,i.kt)("h2",{id:"boolean"},"Boolean"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'Field("false", false).isTrue\n// res13: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(Equal(path = FieldPath(parts = List("false")), compared = "true"))\n// )\nField("true", true).isFalse\n// res14: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(Equal(path = FieldPath(parts = List("true")), compared = "false"))\n// )\n')),(0,i.kt)("h2",{id:"ordering"},"Ordering"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import java.time.LocalDateTime\nval now = LocalDateTime.now\n// now: LocalDateTime = 2022-06-30T17:21:59.216\nval nowF = Field.from(now)\n// nowF: Field[LocalDateTime] = Field(\n//   path = FieldPath(parts = List("now")),\n//   value = 2022-06-30T17:21:59.216\n// )\nval tomorrow = now.plusDays(1)\n// tomorrow: LocalDateTime = 2022-07-01T17:21:59.216\nval yesterday = now.minusDays(1)\n// yesterday: LocalDateTime = 2022-06-29T17:21:59.216\n\nnowF.isBetween(tomorrow, yesterday)\n// res15: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(\n//     GreaterEqual(path = FieldPath(parts = List("now")), compared = "2022-07-01T17:21:59.216"),\n//     LessEqual(path = FieldPath(parts = List("now")), compared = "2022-06-29T17:21:59.216")\n//   )\n// )\nnowF < yesterday\n// res16: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(Less(path = FieldPath(parts = List("now")), compared = "2022-06-29T17:21:59.216"))\n// )\nnowF <= yesterday\n// res17: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(\n//     LessEqual(path = FieldPath(parts = List("now")), compared = "2022-06-29T17:21:59.216")\n//   )\n// )\nnowF >= tomorrow\n// res18: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(\n//     GreaterEqual(path = FieldPath(parts = List("now")), compared = "2022-07-01T17:21:59.216")\n//   )\n// )\nnowF > tomorrow\n// res19: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(\n//     Greater(path = FieldPath(parts = List("now")), compared = "2022-07-01T17:21:59.216")\n//   )\n// )\n')),(0,i.kt)("h2",{id:"option"},"Option"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'Field(None).isDefined\n// res20: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(Empty(path = FieldPath(parts = List())))\n// )\nval someF: Field[Option[Int]] = Field(FieldPath("a"), Some(5))\n// someF: Field[Option[Int]] = Field(path = FieldPath(parts = List("a")), value = Some(value = 5))\nsomeF.isEmpty\n// res21: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(NonEmpty(path = FieldPath(parts = List("a"))))\n// )\nsomeF.some(_ > 10)\n// res22: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(Greater(path = FieldPath(parts = List("a")), compared = "10"))\n// )\n\nsomeOrValid {\n    for {\n        option <- someF.option\n        other <- Field(FieldPath("b"), Some(2)).option\n    } yield option < other\n}\n// res23: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(Less(path = FieldPath(parts = List("a")), compared = "b"))\n// )\n')),(0,i.kt)("h2",{id:"string"},"String"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'val stringF: Field[String] = Field("Ann")\n// stringF: Field[String] = Field(path = FieldPath(parts = List()), value = "Ann")\nstringF.startsWith("sca")\n// res24: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(\n//     Message(\n//       path = FieldPath(parts = List()),\n//       error = "starts-with",\n//       message = Some(value = "should start with sca")\n//     )\n//   )\n// )\nstringF.endsWith("la")\n// res25: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(\n//     Message(\n//       path = FieldPath(parts = List()),\n//       error = "ends-with",\n//       message = Some(value = "should end with la")\n//     )\n//   )\n// )\nField("").nonEmpty\n// res26: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(NonEmpty(path = FieldPath(parts = List())))\n// )\nField("").nonBlank\n// res27: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(NonEmpty(path = FieldPath(parts = List())))\n// )\nstringF.minSize(5)\n// res28: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(MinSize(path = FieldPath(parts = List()), size = 5))\n// )\nstringF.maxSize(1)\n// res29: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(MaxSize(path = FieldPath(parts = List()), size = 1))\n// )\nstringF.blank\n// res30: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(Empty(path = FieldPath(parts = List())))\n// )\nstringF.matchesRegex("scala".r)\n// res31: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(\n//     Message(\n//       path = FieldPath(parts = List()),\n//       error = "match",\n//       message = Some(value = "root should match scala")\n//     )\n//   )\n// )\nstringF.matches("scala")\n// res32: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(\n//     Message(\n//       path = FieldPath(parts = List()),\n//       error = "match",\n//       message = Some(value = "root should match scala")\n//     )\n//   )\n// )\n')),(0,i.kt)("h2",{id:"iterable"},"Iterable"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'val listF: Field[List[Int]] = Field(List(1, 12))\n// listF: Field[List[Int]] = Field(path = FieldPath(parts = List()), value = List(1, 12))\nlistF.each(_ > 10)\n// res33: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(Greater(path = FieldPath(parts = List("0")), compared = "10"))\n// )\nlistF.any(_ === 10)\n// res34: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(\n//     Equal(path = FieldPath(parts = List("1")), compared = "10"),\n//     Equal(path = FieldPath(parts = List("0")), compared = "10")\n//   )\n// )\nField(List()).nonEmpty\n// res35: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Valid\nlistF.minSize(3)\n// res36: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(MinSize(path = FieldPath(parts = List()), size = 3))\n// )\nlistF.maxSize(1)\n// res37: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(MaxSize(path = FieldPath(parts = List()), size = 1))\n// )\n')),(0,i.kt)("h2",{id:"map"},"Map"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'val mapF: Field[Map[String, Int]] = Field(Map("" -> 2, "2" -> 2))\n// mapF: Field[Map[String, Int]] = Field(\n//   path = FieldPath(parts = List()),\n//   value = Map("" -> 2, "2" -> 2)\n// )\nmapF.minSize(4)\n// res38: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(MinSize(path = FieldPath(parts = List()), size = 4))\n// )\nmapF.maxSize(1)\n// res39: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(MaxSize(path = FieldPath(parts = List()), size = 1))\n// )\nmapF.each(_.second > 4)\n// res40: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(\n//     Greater(path = FieldPath(parts = List("")), compared = "4"),\n//     Greater(path = FieldPath(parts = List("2")), compared = "4")\n//   )\n// )\nmapF.eachKey(_.nonEmpty)\n// res41: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(NonEmpty(path = FieldPath(parts = List(""))))\n// )\nmapF.eachValue(_ > 4)\n// res42: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(\n//     Greater(path = FieldPath(parts = List("")), compared = "4"),\n//     Greater(path = FieldPath(parts = List("2")), compared = "4")\n//   )\n// )\nmapF.any(_.second > 4)\n// res43: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(\n//     Greater(path = FieldPath(parts = List("2")), compared = "4"),\n//     Greater(path = FieldPath(parts = List("")), compared = "4")\n//   )\n// )\nmapF.anyKey(_ === "4")\n// res44: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(\n//     Equal(path = FieldPath(parts = List("2")), compared = "4"),\n//     Equal(path = FieldPath(parts = List("")), compared = "4")\n//   )\n// )\nmapF.anyValue(_ > 4)\n// res45: Rule[Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = Invalid(\n//   errors = List(\n//     Greater(path = FieldPath(parts = List("2")), compared = "4"),\n//     Greater(path = FieldPath(parts = List("")), compared = "4")\n//   )\n// )\n')),(0,i.kt)("h2",{id:"effectful"},"Effectful"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import jap.fields._\nimport jap.fields.ZioInterop._\nimport jap.fields.fail._\nimport jap.fields.error._\nimport zio._\n\nobject Validation extends AccumulateVM[Task, ValidationError] with CanFailWithValidationError\nimport Validation._\n\ndef unsafeRun[A](task: Task[A]) = Runtime.global.unsafeRun(task)\ndef isPositiveApi(number: Int): zio.Task[Boolean] = zio.UIO(number > 0)\n\nval field = Field(FieldPath("size"), -1)\n// field: Field[Int] = Field(path = FieldPath(parts = List("size")), value = -1)\nunsafeRun(field.ensureF(isPositiveApi, _.failMessage("API: NOT POSITIVE")).effect)\n// res47: Accumulate[ValidationError] = Invalid(\n//   errors = List(\n//     Message(path = FieldPath(parts = List("size")), error = "API: NOT POSITIVE", message = None)\n//   )\n// )\nunsafeRun(field.assertF(isPositiveApi, _.messageError("API: NOT POSITIVE")).effect)\n// res48: Accumulate[ValidationError] = Invalid(\n//   errors = List(\n//     Message(path = FieldPath(parts = List("size")), error = "API: NOT POSITIVE", message = None)\n//   )\n// )\n')))}m.isMDXComponent=!0}}]);