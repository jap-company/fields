"use strict";(self.webpackChunkfields_docs=self.webpackChunkfields_docs||[]).push([[642],{3905:function(e,a,t){t.d(a,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var o=r.createContext({}),d=function(e){var a=r.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},p=function(e){var a=d(e.components);return r.createElement(o.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},u=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=d(t),m=n,h=u["".concat(o,".").concat(m)]||u[m]||c[m]||i;return t?r.createElement(h,l(l({ref:a},p),{},{components:t})):r.createElement(h,l({ref:a},p))}));function m(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var i=t.length,l=new Array(i);l[0]=u;var s={};for(var o in a)hasOwnProperty.call(a,o)&&(s[o]=a[o]);s.originalType=e,s.mdxType="string"==typeof e?e:n,l[1]=s;for(var d=2;d<i;d++)l[d]=t[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},191:function(e,a,t){t.r(a),t.d(a,{assets:function(){return p},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return c}});var r=t(7462),n=t(3366),i=(t(7294),t(3905)),l=["components"],s={},o="Syntax",d={unversionedId:"validation-syntax",id:"validation-syntax",title:"Syntax",description:"Here is complete list of predefined validation syntax.",source:"@site/../fields-docs/target/mdoc/validation-syntax.md",sourceDirName:".",slug:"/validation-syntax",permalink:"/fields/docs/validation-syntax",draft:!1,editUrl:"https://github.com/jap-company/fields/tree/master/docs/validation-syntax.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"FailWith",permalink:"/fields/docs/fail-with"},next:{title:"Goals of the project",permalink:"/fields/docs/goals"}},p={},c=[{value:"Generic",id:"generic",level:2},{value:"Boolean",id:"boolean",level:2},{value:"Ordering",id:"ordering",level:2},{value:"Option",id:"option",level:2},{value:"String",id:"string",level:2},{value:"Iterable",id:"iterable",level:2},{value:"Map",id:"map",level:2},{value:"Effectful",id:"effectful",level:2}],u={toc:c};function m(e){var a=e.components,t=(0,n.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"syntax"},"Syntax"),(0,i.kt)("p",null,"Here is complete list of predefined validation syntax."),(0,i.kt)("h2",{id:"generic"},"Generic"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import jap.fields._\nimport jap.fields.DefaultAccumulateVM._\nimport jap.fields.FieldPathConversions._\nval field: Field[Int] = Field("1", 1)\n// field: Field[Int] = Field(path = FieldPath(parts = List("1")), value = 1)\nensure(false, field.failInvalid)\n// res0: Accumulate[ValidationError] = Invalid(\n//   errors = List(Invalid(path = FieldPath(parts = List("1"))))\n// )\nfield.ensure(_ == 3, _.failInvalid)\n// res1: Accumulate[ValidationError] = Invalid(\n//   errors = List(Invalid(path = FieldPath(parts = List("1"))))\n// )\nfield.assert(_ == 3, _.invalidError)\n// res2: Accumulate[ValidationError] = Invalid(\n//   errors = List(Invalid(path = FieldPath(parts = List("1"))))\n// )\nfield.check(f => if(false) f.failMessage("A") else f.failMessage("B"))\n// res3: Accumulate[ValidationError] = Invalid(\n//   errors = List(Message(path = FieldPath(parts = List("1")), error = "B", message = None))\n// )\nfield equalTo 2\n// res4: Accumulate[ValidationError] = Invalid(\n//   errors = List(Equal(path = FieldPath(parts = List("1")), compared = "2"))\n// )\nfield notEqualTo 1\n// res5: Accumulate[ValidationError] = Invalid(\n//   errors = List(NotEqual(path = FieldPath(parts = List("1")), compared = "1"))\n// )\nfield equalTo Field("2", 2)\n// res6: Accumulate[ValidationError] = Invalid(\n//   errors = List(Equal(path = FieldPath(parts = List("1")), compared = "2"))\n// )\nfield notEqualTo Field("1", 1)\n// res7: Accumulate[ValidationError] = Invalid(\n//   errors = List(NotEqual(path = FieldPath(parts = List("1")), compared = "1"))\n// )\nfield in List(2, 3)\n// res8: Accumulate[ValidationError] = Invalid(\n//   errors = List(OneOf(path = FieldPath(parts = List("1")), variants = List("2", "3")))\n// )\nfield.all(_ === 2, _ !== 1)\n// res9: Accumulate[ValidationError] = Invalid(\n//   errors = List(\n//     Equal(path = FieldPath(parts = List("1")), compared = "2"),\n//     NotEqual(path = FieldPath(parts = List("1")), compared = "1")\n//   )\n// )\nfield.any(_ === 2, _ !== 3)\n// res10: Accumulate[ValidationError] = Valid\nfield.when(false)(_ !== field.value)\n// res11: Accumulate[ValidationError] = Valid\nfield.unless(true)(_ !== field.value)\n// res12: Accumulate[ValidationError] = Valid\nimplicit val policy: Policy[Int] = _ < 0\n// policy: ValidationPolicy[Int, Sync, [E >: Nothing <: Any] => Accumulate[E], ValidationError] = repl.MdocSession$App$$Lambda$12096/482092733@43fa4b2c\nfield.validate\n// res13: Accumulate[ValidationError] = Invalid(\n//   errors = List(Less(path = FieldPath(parts = List("1")), compared = "0"))\n// )\n')),(0,i.kt)("h2",{id:"boolean"},"Boolean"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'Field("false", false).isTrue\n// res14: Accumulate[ValidationError] = Invalid(\n//   errors = List(Equal(path = FieldPath(parts = List("false")), compared = "true"))\n// )\nField("true", true).isFalse\n// res15: Accumulate[ValidationError] = Invalid(\n//   errors = List(Equal(path = FieldPath(parts = List("true")), compared = "false"))\n// )\n')),(0,i.kt)("h2",{id:"ordering"},"Ordering"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import java.time.LocalDateTime\nval now = LocalDateTime.now\n// now: LocalDateTime = 2022-06-18T13:43:46.847\nval nowF = Field.from(now)\n// nowF: Field[LocalDateTime] = Field(\n//   path = FieldPath(parts = List("now")),\n//   value = 2022-06-18T13:43:46.847\n// )\nval tomorrow = now.plusDays(1)\n// tomorrow: LocalDateTime = 2022-06-19T13:43:46.847\nval yesterday = now.minusDays(1)\n// yesterday: LocalDateTime = 2022-06-17T13:43:46.847\n\nnowF.isBetween(tomorrow, yesterday)\n// res16: Accumulate[ValidationError] = Invalid(\n//   errors = List(\n//     GreaterEqual(path = FieldPath(parts = List("now")), compared = "2022-06-19T13:43:46.847"),\n//     LessEqual(path = FieldPath(parts = List("now")), compared = "2022-06-17T13:43:46.847")\n//   )\n// )\nnowF < yesterday\n// res17: Accumulate[ValidationError] = Invalid(\n//   errors = List(Less(path = FieldPath(parts = List("now")), compared = "2022-06-17T13:43:46.847"))\n// )\nnowF <= yesterday\n// res18: Accumulate[ValidationError] = Invalid(\n//   errors = List(\n//     LessEqual(path = FieldPath(parts = List("now")), compared = "2022-06-17T13:43:46.847")\n//   )\n// )\nnowF >= tomorrow\n// res19: Accumulate[ValidationError] = Invalid(\n//   errors = List(\n//     GreaterEqual(path = FieldPath(parts = List("now")), compared = "2022-06-19T13:43:46.847")\n//   )\n// )\nnowF > tomorrow\n// res20: Accumulate[ValidationError] = Invalid(\n//   errors = List(\n//     Greater(path = FieldPath(parts = List("now")), compared = "2022-06-19T13:43:46.847")\n//   )\n// )\n')),(0,i.kt)("h2",{id:"option"},"Option"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'Field(None).isDefined\n// res21: Accumulate[ValidationError] = Invalid(\n//   errors = List(Empty(path = FieldPath(parts = List())))\n// )\nval someF: Field[Option[Int]] = Field(FieldPath("a"), Some(5))\n// someF: Field[Option[Int]] = Field(path = FieldPath(parts = List("a")), value = Some(value = 5))\nsomeF.isEmpty\n// res22: Accumulate[ValidationError] = Invalid(\n//   errors = List(NonEmpty(path = FieldPath(parts = List("a"))))\n// )\nsomeF.some(_ > 10)\n// res23: Accumulate[ValidationError] = Invalid(\n//   errors = List(Greater(path = FieldPath(parts = List("a")), compared = "10"))\n// )\n\nsomeOrValid {\n    for {\n        option <- someF.option\n        other <- Field(FieldPath("b"), Some(2)).option\n    } yield option < other\n}\n// res24: Accumulate[ValidationError] = Invalid(\n//   errors = List(Less(path = FieldPath(parts = List("a")), compared = "b"))\n// )\n')),(0,i.kt)("h2",{id:"string"},"String"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'val stringF: Field[String] = Field("Ann")\n// stringF: Field[String] = Field(path = FieldPath(parts = List()), value = "Ann")\nstringF.startsWith("sca")\n// res25: Accumulate[ValidationError] = Invalid(\n//   errors = List(\n//     Message(\n//       path = FieldPath(parts = List()),\n//       error = "starts-with",\n//       message = Some(value = "should start with sca")\n//     )\n//   )\n// )\nstringF.endsWith("la")\n// res26: Accumulate[ValidationError] = Invalid(\n//   errors = List(\n//     Message(\n//       path = FieldPath(parts = List()),\n//       error = "ends-with",\n//       message = Some(value = "should end with la")\n//     )\n//   )\n// )\nField("").nonEmpty\n// res27: Accumulate[ValidationError] = Invalid(\n//   errors = List(Empty(path = FieldPath(parts = List())))\n// )\nField("").nonBlank\n// res28: Accumulate[ValidationError] = Invalid(\n//   errors = List(Empty(path = FieldPath(parts = List())))\n// )\nstringF.minSize(5)\n// res29: Accumulate[ValidationError] = Invalid(\n//   errors = List(MinSize(path = FieldPath(parts = List()), size = 5))\n// )\nstringF.maxSize(1)\n// res30: Accumulate[ValidationError] = Invalid(\n//   errors = List(MaxSize(path = FieldPath(parts = List()), size = 1))\n// )\nstringF.blank\n// res31: Accumulate[ValidationError] = Invalid(\n//   errors = List(NonEmpty(path = FieldPath(parts = List())))\n// )\nstringF.matches("scala".r)\n// res32: Accumulate[ValidationError] = Invalid(\n//   errors = List(\n//     Message(\n//       path = FieldPath(parts = List()),\n//       error = "match",\n//       message = Some(value = "root should match scala")\n//     )\n//   )\n// )\nstringF.matches("scala")\n// res33: Accumulate[ValidationError] = Invalid(\n//   errors = List(\n//     Message(\n//       path = FieldPath(parts = List()),\n//       error = "match",\n//       message = Some(value = "root should match scala")\n//     )\n//   )\n// )\n')),(0,i.kt)("h2",{id:"iterable"},"Iterable"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'val listF: Field[List[Int]] = Field(List(1, 12))\n// listF: Field[List[Int]] = Field(path = FieldPath(parts = List()), value = List(1, 12))\nlistF.each(_ > 10)\n// res34: Accumulate[ValidationError] = Invalid(\n//   errors = List(Greater(path = FieldPath(parts = List("0")), compared = "10"))\n// )\nlistF.any(_ === 10)\n// res35: Accumulate[ValidationError] = Invalid(\n//   errors = List(\n//     Equal(path = FieldPath(parts = List("1")), compared = "10"),\n//     Equal(path = FieldPath(parts = List("0")), compared = "10")\n//   )\n// )\nField(List()).nonEmpty\n// res36: Accumulate[ValidationError] = Invalid(\n//   errors = List(Empty(path = FieldPath(parts = List())))\n// )\nlistF.minSize(3)\n// res37: Accumulate[ValidationError] = Invalid(\n//   errors = List(MinSize(path = FieldPath(parts = List()), size = 3))\n// )\nlistF.maxSize(1)\n// res38: Accumulate[ValidationError] = Invalid(\n//   errors = List(MaxSize(path = FieldPath(parts = List()), size = 1))\n// )\n')),(0,i.kt)("h2",{id:"map"},"Map"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'val mapF: Field[Map[String, Int]] = Field(Map("" -> 2, "2" -> 2))\n// mapF: Field[Map[String, Int]] = Field(\n//   path = FieldPath(parts = List()),\n//   value = Map("" -> 2, "2" -> 2)\n// )\nmapF.minSize(4)\n// res39: Accumulate[ValidationError] = Invalid(\n//   errors = List(MinSize(path = FieldPath(parts = List()), size = 4))\n// )\nmapF.maxSize(1)\n// res40: Accumulate[ValidationError] = Invalid(\n//   errors = List(MaxSize(path = FieldPath(parts = List()), size = 1))\n// )\nmapF.each(_.second > 4)\n// res41: Accumulate[ValidationError] = Invalid(\n//   errors = List(\n//     Greater(path = FieldPath(parts = List("0")), compared = "4"),\n//     Greater(path = FieldPath(parts = List("1")), compared = "4")\n//   )\n// )\nmapF.eachKey(_.nonEmpty)\n// res42: Accumulate[ValidationError] = Invalid(\n//   errors = List(Empty(path = FieldPath(parts = List("0"))))\n// )\nmapF.eachValue(_ > 4)\n// res43: Accumulate[ValidationError] = Invalid(\n//   errors = List(\n//     Greater(path = FieldPath(parts = List("0")), compared = "4"),\n//     Greater(path = FieldPath(parts = List("1")), compared = "4")\n//   )\n// )\nmapF.any(_.second > 4)\n// res44: Accumulate[ValidationError] = Invalid(\n//   errors = List(\n//     Greater(path = FieldPath(parts = List("1")), compared = "4"),\n//     Greater(path = FieldPath(parts = List("0")), compared = "4")\n//   )\n// )\nmapF.anyKey(_ === "4")\n// res45: Accumulate[ValidationError] = Invalid(\n//   errors = List(\n//     Equal(path = FieldPath(parts = List("1")), compared = "4"),\n//     Equal(path = FieldPath(parts = List("0")), compared = "4")\n//   )\n// )\nmapF.anyValue(_ > 4)\n// res46: Accumulate[ValidationError] = Invalid(\n//   errors = List(\n//     Greater(path = FieldPath(parts = List("1")), compared = "4"),\n//     Greater(path = FieldPath(parts = List("0")), compared = "4")\n//   )\n// )\n')),(0,i.kt)("h2",{id:"effectful"},"Effectful"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import jap.fields._\nimport jap.fields.ZIOInterop._\nimport zio._\nobject TaskVM extends AccumulateVM[Task, ValidationError]\nimport TaskVM._\n\ndef unsafeRun[A](task: Task[A]) = Runtime.global.unsafeRun(task)\ndef isPositiveApi(number: Int): zio.Task[Boolean] = zio.UIO(number > 0)\n\nval field = Field(FieldPath("size"), -1)\n// field: Field[Int] = Field(path = FieldPath(parts = List("size")), value = -1)\nunsafeRun(field.ensureF(isPositiveApi, _.failMessage("API: NOT POSITIVE")))\n// res48: Accumulate[ValidationError] = Invalid(\n//   errors = List(\n//     Message(path = FieldPath(parts = List("size")), error = "API: NOT POSITIVE", message = None)\n//   )\n// )\nunsafeRun(field.assertF(isPositiveApi, _.messageError("API: NOT POSITIVE")))\n// res49: Accumulate[ValidationError] = Invalid(\n//   errors = List(\n//     Message(path = FieldPath(parts = List("size")), error = "API: NOT POSITIVE", message = None)\n//   )\n// )\nunsafeRun(ensureF(isPositiveApi(field.value), field.failMessage("API: NOT POSITIVE")))\n// res50: Accumulate[ValidationError] = Invalid(\n//   errors = List(\n//     Message(path = FieldPath(parts = List("size")), error = "API: NOT POSITIVE", message = None)\n//   )\n// )\n')))}m.isMDXComponent=!0}}]);