"use strict";(self.webpackChunkfields_docs=self.webpackChunkfields_docs||[]).push([[129],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},l=Object.keys(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=i.createContext({}),s=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=s(e.components);return i.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,f=u["".concat(c,".").concat(m)]||u[m]||p[m]||l;return n?i.createElement(f,r(r({ref:t},d),{},{components:n})):i.createElement(f,r({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,r=new Array(l);r[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var s=2;s<l;s++)r[s]=n[s];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},562:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var i=n(7462),a=(n(7294),n(3905));const l={},r="ValidationPolicy",o={unversionedId:"validation-policy",id:"validation-policy",title:"ValidationPolicy",description:"Encapsulates Field validation logic. Also there is ValidationPolicyBuilder which provides convenient syntax to define Field validation logic",source:"@site/../fields-docs/target/mdoc/validation-policy.md",sourceDirName:".",slug:"/validation-policy",permalink:"/fields/docs/validation-policy",draft:!1,editUrl:"https://github.com/jap-company/fields/tree/master/docs/validation-policy.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Effect",permalink:"/fields/docs/effect"},next:{title:"Goals of the project",permalink:"/fields/docs/goals"}},c={},s=[{value:"Syntax",id:"syntax",level:2}],d={toc:s};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"validationpolicy"},"ValidationPolicy"),(0,a.kt)("p",null,"Encapsulates ",(0,a.kt)("inlineCode",{parentName:"p"},"Field")," validation logic. Also there is ",(0,a.kt)("inlineCode",{parentName:"p"},"ValidationPolicyBuilder")," which provides convenient syntax to define ",(0,a.kt)("inlineCode",{parentName:"p"},"Field")," validation logic"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"trait ValidationPolicy[P, F[_], V[_], E] { self =>\n  def validate(field: Field[P]): Rule[F, V, E]\n}\n")),(0,a.kt)("h2",{id:"syntax"},"Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import jap.fields._\nimport jap.fields.DefaultAccumulateVM._\n\ncase class Email(value: String) extends AnyVal\nobject Email {\n    //Policy is interface with 1 validate method, so you can do so\n    implicit val policy: Policy[Email] = _.map(_.value).all(_.nonEmpty, _.maxSize(40))\n}\ncase class Request(name: String, email: Email, age: Int, hasParrot: Boolean)\nobject Request {\n  implicit val policy: Policy[Request] =\n      Policy\n        .builder[Request]\n        .subRule(_.name)(_.minSize(4), _.maxSize(48)) //runs all validations combining using and\n        .subRule(_.email)(_.validate) //Reuse Email Policy\n        .subRule(_.age, _.hasParrot)((age, hasParrot) => age > 48 || (age > 22 && hasParrot.isTrue)) // 2 fields rule\n        .build\n}\nField(Request("", Email(""), 23, true)).validate.effect // This will use implicit policy to validate\n// res1: Accumulate[ValidationError] = Invalid(\n//   errors = List(\n//     MinSize(path = FieldPath(parts = List("name")), size = 4),\n//     NonEmpty(path = FieldPath(parts = List("email")))\n//   )\n// ) // This will use implicit policy to validate\nField(Request("1234", Email("ann@gmail.com"), 23, true)).validateEither\n// res2: Either[List[ValidationError], Request] = Right(\n//   value = Request(\n//     name = "1234",\n//     email = Email(value = "ann@gmail.com"),\n//     age = 23,\n//     hasParrot = true\n//   )\n// )\n')))}p.isMDXComponent=!0}}]);